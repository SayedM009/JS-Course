--- Javascript is a high-level, prototype-ased object-oriented, multi-paradigm, interpreted or just-in-time compiled, dynamic, single-threaded, garbage-collected programming language with first-class functions and a non-blocking event loop concurrency model.

- Hight-level : (Js, Python)
developer does not have to worry about handling the or any hardware , everything happens automatically.

- Garbage-collected : it's an algorasim inside js engine that remove all the old objects from computer memory

- Interpreted or just-in-time-compiled :

- Paradigm : an approach and minset of structuring code, which will direct your coding style and techique.

- Multi-paradigm :
1- Procedural programming : just organize the code 
2- Object-oriented programming (OOP) : 
3- Functional programming (FP) :

- Prototype-based object-oriented : everything in js is object expet primitive variables 

- First-class functions : in a language with first-class functions, functions are simply treated as variables we can pass them into other functions, and return them from functions.

- Dynamic : no data type defintions. types becomes known at runtime .
data type of variable is automatically changed.

- Single-threaded , Non-blocking event loop : 

- concurrency mode: how the javascript engine handles multiple tasks happening at the same time and Js runs in one singel thread, so it can only do one thing at a time.

- event loop takes long running tasks, executes them in the "background", and put them back in the main thread once they are finished. 


-  JavaScript Engine : is a program that excutes javascript code.


--- Compilation: Entire code is converted into machine code at onece, and written to a binary file that can be executed by a computer. 

- Compilation Steps : 

			     Step 01							Step 02
- Source Code ----------------- > Portable file : machine code ----------------> Program running
			compilation							Execution :can happen way after compilation


--- Interpretation : interpeter runs through the source code and executes it line by line.

- Interpretation Steps :

			     		Step 01
- Source Code --------------------------------- > Program running .
			Execution line by line : code still needs to be converted to machine code 


--- Just-in-time (JIT) Compilation : Entire code is converted into machine code at once executed immediately.

- Just-in-time (JIT) Compilation Steps :

			     Step 01				    Step 02
- Source Code ----------------- >  machine code ----------------> Program running
			compilation				Execution : happens immediately

														
														
																During execution
												|---->				Optimiztion       <-----------|
												|									 |
JavaScript Engine Works : code -> parsing to AST -> compilation (Just-in-time compilation) - > execution (happens in call stack)




